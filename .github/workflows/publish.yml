name: Create Release

on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: https://registry.npmjs.org/

      - name: Get Yarn Cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn Dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ matrix.app }}-${{ hashFiles('yarn.lock') }}

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Check For Lint
        run: yarn lint

      - name: Run Unit Tests + Coverage
        run: yarn test:cov

      - name: Run Build
        run: yarn build

      # NOTE: Not Currently publishing to npm
      # - name: Publish
      #   if: steps.check.outputs.changed == 'true'
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      #     GITHUB_REF: ${{ github.ref }}
      #   run: |
      #     gitBranch=${GITHUB_REF##*/}
      #     packageVersion=$(cat package.json | jq -r '.version')
      #     publishFlag=$(if [ "$GITHUB_REF" != 'refs/heads/master' ]; then eval echo '--tag $gitBranch'; else echo ''; fi;)
      #     echo "::set-env name=PACKAGE_VERSION::$packageVersion"
      #     npm publish $publishFlag

      # Upload to codecov.io
      - name: Upload Test Coverage
        uses: codecov/codecov-action@v1

      - name: Check if version has been updated
        id: check
        uses: EndBug/version-check@v1

      - name: Create Release
        if: steps.check.outputs.changed == 'true'
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: v${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: github.ref != 'refs/heads/master'

      - name: Updates Major Version Branch
        # If a new version is published, i.e. v1.2.3 then this step will update branch "v1" to this commit
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          majorVersion=$(cat package.json | jq -r '.version' | cut -d "." -f1)
          git add -f dist
          git push -f https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:refs/heads/v$majorVersion
  